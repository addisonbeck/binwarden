#!/usr/bin/env bash

source $APPLICATION_LIB_DIR/helpers/logger

export PROJECT_PATH="$HOME"
export SESSION_PREFIX="⚠️"
export SEPARATOR_CHAR="▶"
export SESSION_NAME="unnamed session"
export TEST_COMMAND="none provided!"

export SUPPORTS_EDITING=false
export SUPPORTS_GIT=false
export SUPPORTS_TESTING=false
export SUPPORTS_BUILDING=false
export SUPPORTS_TERMINAL=false
export SUPPORTS_DESTRUCTION=false
export SUPPORTS_STOPPING=true

function full_session_name () {
  printf "${SESSION_PREFIX}${SEPARATOR_CHAR} ${SESSION_NAME}"
}

function kill_session_if_exists () {
  log_info "Killing session \"$(full_session_name)\""
  tmux has-session -t "$(full_session_name)" > /dev/null 2>&1
  if [ $? != 1 ]; then
    tmux kill-session -t "$(full_session_name)" > /dev/null 2>&1
  fi
}

function start_session () {
  tmux has-session -t "$(full_session_name)" > /dev/null 2>&1
  if [ $? != 0 ]; then
    log_success "Starting session \"$(full_session_name)\" with window \"${WINDOW_NAME}\""
    tmux new-session -d -s "$(full_session_name)" -n "${WINDOW_NAME}" "${STARTER_COMMAND}" > /dev/null 2>&1
    return 0
  else
    log_info "Session \"$(full_session_name)\" is already running."
    return 1
  fi
}

function ensure_command_installed () {
  if ! command -v ${1} > /dev/null 2>&1
  then
    log_error  "${1} not found - please install!"
    return 0
  fi
}

function ensure_repo_cloned () {
  if [ $DESTROY_PROJECT ]
  then
    return 0
  fi

  if [ $STOP_BUILD ]
  then
    return 0
  fi

  if [ ! -d "$HOME/bitwarden/${1}" ]; then
    log_warning  "${1} not found - cloning"
    $APPLICATION_LIB_DIR/cloners/clone-${1}
  fi
}

ensure_command_installed tmux
